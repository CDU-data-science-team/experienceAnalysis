% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_tfidf_ngrams.R
\name{calc_tfidf_ngrams}
\alias{calc_tfidf_ngrams}
\title{Calculate TF-IDFs for unigrams or bigrams}
\usage{
calc_tfidf_ngrams(
  x,
  target_col_name,
  text_col_name,
  filter_class = NULL,
  ngrams_type = c("Unigrams", "Bigrams"),
  number_of_ngrams = NULL
)
}
\arguments{
\item{x}{A data frame with two columns: the column with the classes; and the
column with the text.}

\item{target_col_name}{A string with the column name of the target variable.
It is equivalent to argument \code{document} in \verb{bind_tf_idf\{tidytext\}}.}

\item{text_col_name}{A string with the column name of the text variable.}

\item{filter_class}{A string or vector of strings with the name(s) of the
class(es) for which TF-IDFs are to be calculated. Defaults to
\code{NULL} (all classes).}

\item{ngrams_type}{A string. Should be "Unigrams" for unigrams and "Bigrams"
for bigrams.}

\item{number_of_ngrams}{Integer. Number of ngrams to return. Defaults to all.}
}
\value{
A data frame with six columns: class; n-gram (word or bigram); count;
term-frequency; inverse document frequency; and TF-IDF.
}
\description{
For a given labelled text, return the unigrams or bigrams with the
largest TF-IDFs for the given class(es).
}
\note{
Unlike other functions in \code{experienceAnalysis} (e.g.
\code{\link{calc_net_sentiment_nrc}}), here it does not make
sense to have \code{target_col_name} set to \code{NULL}- the TF-IDF of an n-gram
depends on the number of "documents" containing it (see Silge and
Robinson, 2017), so there must be at least two classes (or "documents")
to use in the calculations. \cr\cr
When \code{filter_class} is not \code{NULL}, the TF-IDFs will \emph{still} be
calculated using \emph{all} classes/documents and \emph{then} filtered by
\code{filter_class}.
}
\examples{
library(experienceAnalysis)
books <- janeaustenr::austen_books() # Jane Austen books
emma <- paste(books[books$book == "Emma", ], collapse = " ") # String with whole book
pp <- paste(books[books$book == "Pride & Prejudice", ], collapse = " ") # String with whole book

# Make data frame with books Emma and Pride & Prejudice
x <- data.frame(
  text = c(emma, pp),
  book = c("Emma", "Pride & Prejudice")
)

# Get a few of the bigram counts, TFs, IDFs and highest TF-IDFs for each book
calc_tfidf_ngrams(x, target_col_name = "book", text_col_name = "text",
                  filter_class = NULL,
                  ngrams_type = "Bigrams",
                  number_of_ngrams = 30
) \%>\%
split(.$book)
}
\references{
Silge J. & Robinson D. (2017). Text Mining with R: A Tidy
Approach. Sebastopol, CA: Oâ€™Reilly Media. ISBN 978-1-491-98165-8.
}
